@inherits LayoutComponentBase
@inject AppState AppState
@implements IDisposable

<div class="page">
    @*<div class="sidebar">
            <NavMenu />
        </div>*@

    <div class="main">
        <div class="top-row px-4" id="navTop">

            <img id="gifWorking" src="images/working.gif" class="workingGif @AppState.hiddenClass" />
            <NavLink id="mainNav" class="nav-link nav-link-selected" href="" Match="NavLinkMatch.All">
                Xml2Xml
            </NavLink>
            <NavLink id="X2T2XNav" class="nav-link " href="X2T2X">
                Xml2Tsv2Xml
            </NavLink>
            <NavLink id="XMLIDNav" class="nav-link " href="XMLIDs">
                xml:id
            </NavLink>
            <button class="myButton" style="margin-left:20px" @onclick="getConfig">Configuration</button>
            <a href="About" class="ml-md-auto">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

@code {

    [CascadingParameter] public IModalService Modal { get; set; }
    private async void getConfig()
    {
        ModalOptions options = new ModalOptions() { HideCloseButton = true, Animation = ModalAnimation.FadeInOut(0.5) };

        var messageForm = Modal.Show<MessageForm>(title: "Configuration",options: options);
        var result = await messageForm.Result;

        //if (!result.Cancelled)
        //{
        //    string _message = result.Data?.ToString() ?? string.Empty;
        //    Helpers.ShowModal(_message, Modal);
        //}

    }

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }


}
