@inject AppState AppState

<div class="simple-form">
    <div style="margin-bottom:20px;">
        Mode:
        <select @bind="X2XMode">
            <option value=@Extensions.GetEnumDisplayName(enmX2XMode.None)>
                @Extensions.GetDescription(enmX2XMode.None)
            </option>
            <option value=@Extensions.GetEnumDisplayName(enmX2XMode.CopyTagWithAttribs)>
                @Extensions.GetDescription(enmX2XMode.CopyTagWithAttribs)
            </option>
            <option value=@Extensions.GetEnumDisplayName(enmX2XMode.CopyTagWithNewAttribs)>
                @Extensions.GetDescription(enmX2XMode.CopyTagWithNewAttribs)
            </option>
        </select>
    </div>

    <div class="form-group @TagHidden">
        <label for="Tag">Tag Name</label>
        <input @bind="Tag" type="text" class="form-control" id="tag" placeholder="Tag to work on" />
    </div>
    <div class="form-group @AttributeHidden">
        <label for="Attribute">Attribute Name</label>
        <input @bind="Attribute" type="text" class="form-control" id="attribute" placeholder="Attribute to work on" />
    </div>
    <div class="form-group @attribStartHidden">
        <label for="attribStartVal">New Attribute Start Value</label>
        <input @bind="attribStartVal" type="text" class="form-control" id="attributeStart" placeholder="New Attribute start value" />
    </div>

    <button @onclick="SubmitForm" class="btn btn-primary">Submit</button>
    <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
</div>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    string Tag { get; set; }
    string Attribute { get; set; }
    public int attribStartVal { get; set; }
    string TagHidden { get; set; }
    string AttributeHidden { get; set; }
    public string attribStartHidden { get; set; }


    enmX2XMode _X2XMode;
    enmX2XMode X2XMode
    {
        get { return _X2XMode; }
        set
        {
            _X2XMode = value;
            switch (Extensions.GetEnumDisplayName(value))
            {
                case "None":
                    AppState.X2XMode = enmX2XMode.None;
                    TagHidden = "hidden";
                    AttributeHidden = "hidden";
                    attribStartHidden = "hidden";
                    break;
                case "CopyTagWithAttribs":
                    AppState.X2XMode = enmX2XMode.CopyTagWithAttribs;
                    TagHidden = "";
                    AttributeHidden = "hidden";
                    attribStartHidden = "hidden";
                    break;
                case "CopyTagWithNewAttribs":
                    AppState.X2XMode = enmX2XMode.CopyTagWithNewAttribs;
                    TagHidden = "";
                    AttributeHidden = "";
                    attribStartHidden = "";
                    break;
            }
        }
    }

    protected override void OnInitialized()
    {
        //BlazoredModal.SetTitle("Enter a Message");
        Tag = AppState.tagName;
        Attribute = AppState.attribName;
        attribStartVal = AppState.attribStartVal;
        X2XMode = AppState.X2XMode;
    }

    async Task SubmitForm()
    {
        AppState.tagName = Tag;
        AppState.attribName = Attribute;
        AppState.attribStartVal = attribStartVal;
        AppState.X2XMode = (enmX2XMode)X2XMode;
        //        await BlazoredModal.CloseAsync(ModalResult.Ok(Tag));
        await BlazoredModal.CloseAsync();
    }

    async Task Cancel() => await BlazoredModal.CancelAsync();

    private void ChangeMode(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value.ToString()}");
        switch (e.Value.ToString())
        {
            case "0":
                AppState.X2XMode = enmX2XMode.None;
                TagHidden = "hidden";
                AttributeHidden = "hidden";
                break;
            case "1":
                AppState.X2XMode = enmX2XMode.CopyTagWithAttribs;
                TagHidden = "";
                AttributeHidden = "hidden";
                break;
            case "2":
                AppState.X2XMode = enmX2XMode.CopyTagWithNewAttribs;
                TagHidden = "";
                AttributeHidden = "";
                break;
        }

    }
}
