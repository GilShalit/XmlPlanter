@inject AppState AppState

<div class="simple-form">
    <div style="margin-bottom:20px;">
        Mode:
        <select @bind="OpMode" class="@X2XHidden">
            @*            <option value=@Extensions.GetEnumDisplayName(enmOpMode.None)>
                @Extensions.GetDescription(enmOpMode.None)
                </option>
            *@
            <option value=@Extensions.GetEnumDisplayName(enmOpMode.CopyTagWithAttribs)>
                @Extensions.GetDescription(enmOpMode.CopyTagWithAttribs)
            </option>
            <option value=@Extensions.GetEnumDisplayName(enmOpMode.CopyTagWithNewAttribs)>
                @Extensions.GetDescription(enmOpMode.CopyTagWithNewAttribs)
            </option>
        </select>
        <select @bind="OpMode" class="@X2T2XHidden">
            <option value=@Extensions.GetEnumDisplayName(enmOpMode.NewAttribLookup)>
                @Extensions.GetDescription(enmOpMode.NewAttribLookup)
            </option>
            <option value=@Extensions.GetEnumDisplayName(enmOpMode.ChangeAttribLookup)>
                @Extensions.GetDescription(enmOpMode.ChangeAttribLookup)
            </option>
            <option value=@Extensions.GetEnumDisplayName(enmOpMode.AttribLookupContents)>
                @Extensions.GetDescription(enmOpMode.AttribLookupContents)
            </option>
        </select>
    </div>

    <div class="form-group @TagHidden">
        <label for="Tag">Tag Name</label>
        <input @bind="Tag" type="text" class="form-control" id="tag" placeholder="Tag to work on" />
    </div>
    <div class="form-group @AttributeHidden">
        <label for="Attribute">Attribute Name</label>
        <input @bind="Attribute" type="text" class="form-control" id="attribute" placeholder="Attribute to work on" />
    </div>
    <div class="form-group @NewAttributeHidden">
        <label for="Attribute">New Attribute Name</label>
        <input @bind="newAttribute" type="text" class="form-control" id="attribute" placeholder="Attribute to work on" />
    </div>
    <div class="form-group @attribStartHidden">
        <label for="attribStartVal">New Attribute Start Value</label>
        <input @bind="attribStartVal" type="text" class="form-control" id="attributeStart" placeholder="New Attribute start value" />
    </div>

    <button @onclick="SubmitForm" class="btn btn-primary">OK</button>
    <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    string Tag { get; set; }
    string Attribute { get; set; }
    string newAttribute { get; set; }
    public int attribStartVal { get; set; }
    string TagHidden { get; set; }
    string hidden = "none";

    string X2XHidden { get; set; }
    string X2T2XHidden { get; set; }

    string AttributeHidden { get; set; }
    string NewAttributeHidden { get; set; }
    public string attribStartHidden { get; set; }


    enmOpMode _OpMode;
    enmOpMode OpMode
    {
        get { return _OpMode; }
        set
        {
            _OpMode = value;
            switch (Extensions.GetEnumDisplayName(value))
            {
                case "None":
                    //AppState.OpMode = enmOpMode.None;
                    TagHidden = hidden;
                    AttributeHidden = hidden;
                    NewAttributeHidden = hidden;
                    attribStartHidden = hidden;
                    break;
                case "CopyTagWithAttribs":
                    //AppState.OpMode = enmOpMode.CopyTagWithAttribs;
                    TagHidden = "";
                    AttributeHidden = hidden;
                    NewAttributeHidden = hidden;
                    attribStartHidden = hidden;
                    break;
                case "CopyTagWithNewAttribs":
                    //AppState.OpMode = enmOpMode.CopyTagWithNewAttribs;
                    TagHidden = "";
                    AttributeHidden = "";
                    NewAttributeHidden = hidden;
                    attribStartHidden = "";
                    break;

                case "NewAttribLookup":
                    //AppState.OpMode = enmOpMode.NewAttribLookup;
                    TagHidden = "";
                    AttributeHidden = "";
                    NewAttributeHidden = "";
                    attribStartHidden = hidden;
                    break;
                case "ChangeAttribLookup":
                    //AppState.OpMode = enmOpMode.ChangeAttribLookup;
                    TagHidden = "";
                    AttributeHidden = "";
                    NewAttributeHidden = hidden;
                    attribStartHidden = hidden;
                    break;
                case "AttribLookupContents":
                    //AppState.OpMode = enmOpMode.AttribLookupContents;
                    TagHidden = "";
                    AttributeHidden = "";
                    NewAttributeHidden = hidden;
                    attribStartHidden = hidden;
                    break;
            }
        }
    }

    protected override void OnInitialized()
    {
        //BlazoredModal.SetTitle("Enter a Message");
        Tag = AppState.tagName;
        Attribute = AppState.attribName;
        newAttribute = AppState.newAttribName;
        attribStartVal = AppState.attribStartVal;
        OpMode = AppState.OpMode;
        switch (AppState.PageMode)
        {
            case enmPage.X2X:
                X2XHidden = "";
                X2T2XHidden = hidden;
                break;
            case enmPage.X2T2X:
                X2XHidden = hidden;
                X2T2XHidden = "";
                break;
        }
    }

    async Task SubmitForm()
    {
        AppState.tagName = Tag;
        AppState.attribName = Attribute;
        AppState.newAttribName = newAttribute;
        AppState.attribStartVal = attribStartVal;
        AppState.OpMode = (enmOpMode)OpMode;
        //        await BlazoredModal.CloseAsync(ModalResult.Ok(Tag));
        await BlazoredModal.CloseAsync();
    }

    async Task Cancel() => await BlazoredModal.CancelAsync();

    }

