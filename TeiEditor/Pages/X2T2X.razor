@page "/X2T2X"

@using System.IO
@using System.Net.Http
@using System.Text
@using System.Xml;
@using System.Xml.Schema;

@inject IJSRuntime js
@inject HttpClient _client
@inject AppState AppState
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <div class="row" style="margin-bottom:5px">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnSourceFileChange" accept=".xml" />
                    @lblChooseSource
                </div>
                <div class="col-5" style="padding-top:3px!important">@lblSource</div>
                <div class="col-3">
                    <button @onclick="Lookup" class="myButton">Mark</button>
                </div>
            </div>
            <div class="row">
                <div class="col" style="padding-left:0!important;">
                    <MonacoEditor @ref="_editorSource" Id="editor-source" ConstructionOptions="EditorConstructionOptions"
                                  OnDidInit="OnDidInitSource" OnContextMenu="OnContextMenuSource" OnMouseDown="onMouseDownSource" />
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private MonacoEditor _editorSource { get; set; }
    private string lblSource = "";
    private string lblChooseSource = "Choose Source";
    [CascadingParameter] public IModalService Modal { get; set; }
    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            GlyphMargin = true,
            AutomaticLayout = true,

        };
    }

    private async Task Lookup()
    {

    }
    private async void onMouseDownSource(EditorMouseEvent eventArg)
    {
    }
    private void OnContextMenuSource(EditorMouseEvent eventArg)
    {
        // To disable menu options according to mode:
        // https://stackoverflow.com/questions/62001650/how-to-open-context-menu-in-monaco-editor-based-on-line-content-in-angular
        // requires an implementation of MonacoEditorBase.createContextKey
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }
    private async Task OnDidInitSource(MonacoEditorBase editor)
    {
        await js.InvokeVoidAsync("registerResize");
        var i = await js.InvokeAsync<string>("resizeEditor", "editor-source");
        //sourceDecorations = await DisplayDecoration(_editorSource, 4);
        // You can now use 'decorationIds' to change or remove the decorations
    }
    private async Task OnSourceFileChange(InputFileChangeEventArgs e)
    {
        lblSource = e.File.Name;
        lblChooseSource = "Source: ";

        if (e.File.Size > 512000)
        {
            lblSource = $"{lblSource} is larger the 500kb!";
        }
        await Helpers.LoadXMLfromFile(_editorSource, e.File);
    }

    protected async override void OnInitialized()
    {
        //        AppState.isWorking();
        AppState.OpMode = enmOpMode.NewAttribLookup;
        AppState.PageMode = enmPage.X2T2X;


        //AppState.notWorking();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("showCurrentNav", "X2T2XNav");
    }

}
