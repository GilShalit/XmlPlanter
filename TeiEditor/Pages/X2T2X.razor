@page "/X2T2X"

@using System.IO
@using System.Net.Http
@using System.Text
@using System.Xml;
@using System.Xml.Schema;
@using System.Text.Json;

@inject IJSRuntime js
@inject HttpClient _client
@inject AppState AppState
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <div class="row" style="margin-bottom:5px">
                <div class="col-1 file-input-zone" style="padding-left:0;padding-right:0">
                    <InputFile OnChange="@OnSourceFileChange" accept=".xml" />
                    @lblChooseSource
                </div>
                <div class="col-3" style="padding-top:3px!important">@lblSource</div>
                <div class="col-1 file-input-zone" style="padding-left:0;padding-right:0">
                    <InputFile OnChange="@OnLookupFileChange" accept=".tsv" />
                    @lblChooseLookup
                </div>
                <div class="col-3" style="padding-top:3px!important">@lblLookup</div>

                <div class="col-1">
                    <button @onclick="Lookup" class="myButton">Lookup</button>
                </div>
                <div class="col-3">
                    <button @onclick="ValidateXML" class="myButton">Validate</button>
                    <button @onclick="Download" class="myButton">Save</button>
                </div>
            </div>
            <div class="row">
                <div class="col" style="padding-left:0!important;">
                    <MonacoEditor @ref="_editorSource" Id="editor-lookup" ConstructionOptions="EditorConstructionOptions"
                                  OnDidInit="OnDidInitSource" OnContextMenu="OnContextMenuSource" OnMouseDown="onMouseDownSource" />
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private MonacoEditor _editorSource { get; set; }
    private string lblSource = "";
    private string lblChooseSource = "Choose Source";
    private string lblLookup = "";
    private string lblChooseLookup = "Choose Lookup";
    private Dictionary<string, string> dicLookup = new Dictionary<string, string>();
    private Dictionary<string, BlazorMonaco.Range> sourceDecorations = new Dictionary<string, BlazorMonaco.Range>();
    ValidationEventHandler eventHandler = new ValidationEventHandler(ValidationEventHandler);
    [CascadingParameter] public IModalService Modal { get; set; }

    static void ValidationEventHandler(object sender, ValidationEventArgs e)
    {
        switch (e.Severity)
        {
            case XmlSeverityType.Error:
                Console.WriteLine("Error: {0}", e.Message);
                break;
            case XmlSeverityType.Warning:
                Console.WriteLine("Warning {0}", e.Message);
                break;
        }
        Helpers.validationErrors.Add(e.Message);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            GlyphMargin = true,
            AutomaticLayout = true
        };
    }

    private async Task ValidateXML()
    {
        await Helpers.ValidateXML(AppState, Modal, _editorSource, eventHandler);
    }

    private async Task Download()
    {
        await Helpers.Download(lblSource, AppState, Modal, _editorSource, js, false);
    }

    private async Task Lookup()
    {
        AppState.isWorking();
        await Task.Delay(5);
        TextModel model = await _editorSource.GetModel();
        await Helpers.markTags(_editorSource, AppState.tagName, sourceDecorations);
        bool doReplace;
        int topLineNotFound = -1;
        string sNewAttrib = ""; string sOldAttrib = "";

        foreach (KeyValuePair<string, BlazorMonaco.Range> dec in sourceDecorations)
        {
            doReplace = false;
            string tag = await model.GetValueInRange(dec.Value, EndOfLinePreference.CRLF);
            Console.WriteLine(tag);
            XmlDocument node = new XmlDocument();
            bool emptyTag = Helpers.IsClosedTag(tag);
            if (emptyTag) node.LoadXml(tag);
            else node.LoadXml($"{tag}</{AppState.tagName}>");

            switch (AppState.OpMode)
            {
                case enmOpMode.NewAttribLookup:
                    foreach (XmlAttribute attrb in node.DocumentElement.Attributes)
                    {
                        if (attrb.Name == AppState.attribName && dicLookup.ContainsKey(attrb.Value))//has old value as key
                        {
                            doReplace = true;
                            sNewAttrib = $" {AppState.newAttribName}=\"{dicLookup[attrb.Value]}\"";
                            if (emptyTag) tag = tag.Replace("/>", $"{sNewAttrib}/>");
                            else tag = tag.Replace(">", $"{sNewAttrib}>");
                        }
                    }
                    break;
                case enmOpMode.ChangeAttribLookup:
                    foreach (XmlAttribute attrb in node.DocumentElement.Attributes)
                    {
                        if (attrb.Name == AppState.attribName && dicLookup.ContainsKey(attrb.Value))//has old value as key
                        {
                            doReplace = true;
                            sNewAttrib = $" {attrb.Name}=\"{dicLookup[attrb.Value]}\"";
                            sOldAttrib = $" {attrb.Name}=\"{attrb.Value}\"";
                            tag = tag.Replace(sOldAttrib, sNewAttrib);
                        }
                    }
                    break;
                case enmOpMode.AttribLookupContents:
                    break;
            }

            if (doReplace)
            {
                await Helpers.ColorRange(_editorSource, dec.Value, dec.Key);
                await _editorSource.SetSelection(dec.Value);
                await _editorSource.Trigger("keyboard", "type", Helpers.TagToJson(tag, enmTagChanges.DoNothing)); //replace with new tag
                string lastLine = await model.GetLineContent(dec.Value.EndLineNumber);
                int badCol = lastLine.IndexOf(">>");
                if (badCol > -1)
                {
                    BlazorMonaco.Range range = new BlazorMonaco.Range() { StartLineNumber = dec.Value.EndLineNumber, EndLineNumber = dec.Value.EndLineNumber, StartColumn = badCol+1, EndColumn = badCol + 3};
                    await _editorSource.SetSelection(range);
                    await _editorSource.Trigger("keyboard", "type", Helpers.TagToJson(">", enmTagChanges.DoNothing)); //replace with new tag
                }

                @*                //ugly hack:
                    await _editorSource.Trigger("keyboard", "type", Helpers.TagToJson(" ", enmTagChanges.DoNothing));//replace with " "
                    BlazorMonaco.Range range = dec.Value;
                    range.EndColumn = range.StartColumn; //range on ""
                    await _editorSource.SetSelection(range); //select " "
                    await _editorSource.Trigger("keyboard", "type", Helpers.TagToJson(tag, enmTagChanges.DoNothing)); //replace with new tag
                *@
            }
            else
            {
                if (topLineNotFound == -1) topLineNotFound = dec.Value.StartLineNumber;//capture first not found line
            }
        }
        if (topLineNotFound != -1) await _editorSource.RevealLineInCenter(topLineNotFound);
        AppState.notWorking();
    }

    private async void onMouseDownSource(EditorMouseEvent eventArg)
    {
        await Helpers.markWholeTag(AppState.tagName, eventArg, _editorSource, sourceDecorations);
    }

    private void OnContextMenuSource(EditorMouseEvent eventArg)
    {
        // To disable menu options according to mode:
        // https://stackoverflow.com/questions/62001650/how-to-open-context-menu-in-monaco-editor-based-on-line-content-in-angular
        // requires an implementation of MonacoEditorBase.createContextKey
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }
    private async Task OnDidInitSource(MonacoEditorBase editor)
    {
        await js.InvokeVoidAsync("registerResize1");
        var i = await js.InvokeAsync<string>("resizeEditor", "editor-lookup");
        //sourceDecorations = await DisplayDecoration(_editorSource, 4);
        // You can now use 'decorationIds' to change or remove the decorations
    }
    private async Task OnSourceFileChange(InputFileChangeEventArgs e)
    {
        lblSource = e.File.Name;
        lblChooseSource = "Source: ";

        if (e.File.Size > 512000) lblSource = $"{lblSource} is larger the 500kb!";
        else await Helpers.LoadXMLfromFile(_editorSource, e.File);
    }

    private async Task OnLookupFileChange(InputFileChangeEventArgs e)
    {
        dicLookup.Clear();

        lblLookup = e.File.Name;
        lblChooseLookup = "Lookup file: ";

        if (e.File.Size > 512000)
        {
            lblLookup = $"{lblLookup} is larger the 500kb!";
            return;
        }

        byte[] bytesOfTSV = new byte[e.File.Size];
        using (Stream strm = e.File.OpenReadStream())
        {
            await strm.ReadAsync(bytesOfTSV);
        }
        string stringOfTSV = Encoding.UTF8.GetString(bytesOfTSV);

        List<string> stringsOfTSV = stringOfTSV.Split("\n").ToList<string>();

        if (stringsOfTSV.Count > 1) stringsOfTSV.RemoveAt(0);
        string[] aLine;
        for (int i = 0; i < stringsOfTSV.Count; i++)
        {
            aLine = stringsOfTSV[i].Split("\t");
            if (aLine.Length == 2) dicLookup.Add(aLine[0].Trim(), aLine[1].Trim());
        }
    }

    protected async override void OnInitialized()
    {
        AppState.isWorking();
        await Task.Delay(1);
        //await AddCopyTagActions();

        Helpers.validationErrors = new List<string>();
        await _editorSource.SetValue("");

        AppState.OpMode = enmOpMode.NewAttribLookup;
        AppState.PageMode = enmPage.X2T2X;

        AppState.notWorking();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("showCurrentNav", "X2T2XNav");
    }
  }
