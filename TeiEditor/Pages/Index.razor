@page "/"

@using System.IO
@using System.Net.Http
@using System.Text
@using System.Xml;
@using System.Xml.Schema;

@inject IJSRuntime js
@inject HttpClient _client
@inject AppState AppState
<div class="container-fluid">
    <div class="row w-100">
        <div class="col">
            <div class="row" style="margin-bottom:5px">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnSourceFileChange" accept=".xml" />
                    @lblChooseSource
                </div>
                <div class="col-5" style="padding-top:3px!important">@lblSource</div>
                <div class="col-3">
                    <button @onclick="test" class="myButton">temp</button>
                </div>
            </div>
            <div class="row">
                <div class="col" style="padding-left:0!important;">
                    <MonacoEditor @ref="_editorSource" Id="editor-source" ConstructionOptions="EditorConstructionOptions" OnDidInit="OnDidInitSource" OnContextMenu="OnContextMenuSource" />
                </div>
            </div>
        </div>
        <div class="col">
            <div class="row" style="margin-bottom:5px">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnTargetFileChange" accept=".xml" />
                    @lblChooseTarget
                </div>
                <div class="col-5" style="padding-top:3px!important">@lblTarget</div>
                <div class="col-4">
                    <button @onclick="ValidateXML" class="myButton">Validate</button>
                    <button @onclick="Download" class="myButton">Save</button>
                </div>
            </div>
            <div class="row">
                <div class="col" style="padding-left: 0 !important">
                    <MonacoEditor @ref="_editorTarget" Id="editor-target" ConstructionOptions="EditorConstructionOptions" OnDidInit="OnDidInitTarget" OnContextMenu="OnContextMenuTarget" /> @*onDidChangeCursorSelection="onDidChangeCursorSelectionTarget" />*@
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private MonacoEditor _editorSource { get; set; }
    private MonacoEditor _editorTarget { get; set; }
    private List<string> lSourceLines = new List<string>();
    private List<string> lTargetLines = new List<string>();
    private string ValueToSet { get; set; }
    private Dictionary<string, BlazorMonaco.Range> decorationIdsSource = new Dictionary<string, BlazorMonaco.Range>();
    private string[] decorationIdsTarget;
    private string lblSource = "";
    private string lblChooseSource = "Choose Source";
    private string lblTarget = "";
    private string lblChooseTarget = "Choose Target";
    private XmlSchemaSet schemaSet = new XmlSchemaSet();
    ValidationEventHandler eventHandler = new ValidationEventHandler(ValidationEventHandler);
    [CascadingParameter] public IModalService Modal { get; set; }
    static private List<string> validationErrors = new List<string>();
    private string tagName { get; set; }
    List<FindMatch> sourceMatches { get; set; }

    private async Task test()
    {
        AppState.isWorking();
        await Task.Delay(1);

        TextModel sourceModel = await _editorSource.GetModel();
        List<ModelDeltaDecoration> lstDecorations = new List<ModelDeltaDecoration>();
        sourceMatches = await sourceModel.FindMatches($"<{tagName} ", false, false, false, null, true, 1000);
        if (sourceMatches.Count > 0)
        {
            foreach (FindMatch m in sourceMatches)
            {
                m.Range = await Helpers.ExpandTagRange(m.Range, sourceModel);
                lstDecorations.Add(new ModelDeltaDecoration
                {
                    Range = m.Range,
                    Options = new ModelDecorationOptions
                    {
                        IsWholeLine = false,
                        ClassName = "decorationContentClass",
                        GlyphMarginClassName = "decorationGlyphMarginClass",
                        Minimap = new ModelDecorationMinimapOptions() { Position = MinimapPosition.Inline, Color = "#90EE90" }
                    }
                });
            }
            string[] decorations = await _editorSource.DeltaDecorations(null, lstDecorations.ToArray());
            for (int i = 0; i < sourceMatches.Count; i++)
            {
                decorationIdsSource.Add(decorations[i], sourceMatches[i].Range);
            }
            await _editorSource.RevealLineInCenter(sourceMatches[0].Range.StartLineNumber);
        }

        AppState.notWorking();
    }

    private async void CopyTag()
    {
        Position p = await _editorSource.GetPosition();
        //int line = p.LineNumber;

        BlazorMonaco.Range dec = (from d in decorationIdsSource
                                  where d.Value.StartLineNumber <= p.LineNumber && d.Value.EndLineNumber >= p.LineNumber
                                  select d.Value).FirstOrDefault();
        if (dec != null)
        {
            TextModel sourceModel = await _editorSource.GetModel();
            string tag = await sourceModel.GetValueInRange(dec, EndOfLinePreference.CRLF);

            Selection targetSel = await _editorTarget.GetSelection();
            Position targetStartPos = new Position()
            {

                Column = targetSel.StartColumn,
                LineNumber = targetSel.StartLineNumber,
            };
            Position targetEndPos = new Position()
            {
                Column = targetSel.EndColumn,
                LineNumber = targetSel.EndLineNumber
            };
            if (targetStartPos.LineNumber == targetEndPos.LineNumber)
            {
                targetEndPos.Column += tag.Length;
            }

            if (targetSel.StartLineNumber != targetSel.EndLineNumber || targetSel.StartColumn != targetSel.EndColumn)
            {//a range is selected
                await _editorTarget.SetPosition(targetStartPos);
                await _editorTarget.Trigger("keyboard", "type", Helpers.TagToJson(tag, enmTagChanges.OpenTag));

                await _editorTarget.SetPosition(targetEndPos);
                await _editorTarget.Trigger("keyboard", "type", Helpers.TagToJson($"</{tagName}>", enmTagChanges.DoNothing));
            }
            else
            {//insert at cursor
                await _editorTarget.Trigger("keyboard", "type", Helpers.TagToJson(tag, enmTagChanges.CloseTag));
            }

            // !!! use this to find and replace attribute values
            //XmlDocument node = new XmlDocument();
            //node.LoadXml($"{tag}</{tagName}>");
            //string s = node.DocumentElement.Attributes[0].Value;

        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            GlyphMargin = true,
            AutomaticLayout = true,

        };
    }

    private async Task OnDidInitSource(MonacoEditorBase editor)
    {
        tagName = "seg";

        AppState.isWorking();
        await js.InvokeVoidAsync("registerResize");
        var i = await js.InvokeAsync<string>("resizeEditors", "editor-source");
        //decorationIdsSource = await DisplayDecoration(_editorSource, 4);
        // You can now use 'decorationIds' to change or remove the decorations

        //load schemaSet for validation
        await Helpers.loadSchema("data/tei_all.xsd", "http://www.tei-c.org/ns/1.0", schemaSet, _client);
        await Helpers.loadSchema("data/tei_all_dcr.xsd", "http://www.isocat.org/ns/dcr", schemaSet, _client);
        await Helpers.loadSchema("data/tei_all_teix.xsd", "http://www.tei-c.org/ns/Examples", schemaSet, _client);
        await Helpers.loadSchema("data/tei_all_xml.xsd", "http://www.w3.org/XML/1998/namespace", schemaSet, _client);
        AppState.notWorking();

        await AddCopyTagAction();
    }

    private async Task OnDidInitTarget(MonacoEditorBase editor)
    {
        //lTargetLines = await LoadXMLfromFile(_editorTarget, "data/BTAdler20210210.xml");

        var i = await js.InvokeAsync<string>("resizeEditors", "editor-target");
        //decorationIdsTarget = await DisplayDecoration(_editorTarget, 2);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private void OnContextMenuSource(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private void OnContextMenuTarget(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task OnSourceFileChange(InputFileChangeEventArgs e)
    {
        lblSource = e.File.Name;
        lblChooseSource = "Source: ";

        if (e.File.Size > 512000)
        {
            lblSource = $"{lblSource} is larger the 500kb!";
        }
        lSourceLines = await Helpers.LoadXMLfromFile(_editorSource, e.File);
    }

    private async Task OnTargetFileChange(InputFileChangeEventArgs e)
    {
        lblTarget = e.File.Name;
        lblChooseTarget = "Target: ";

        if (e.File.Size > 512000)
        {
            lblTarget = $"{lblTarget} is larger the 500kb!";
        }
        lTargetLines = await Helpers.LoadXMLfromFile(_editorTarget, e.File);
    }

    //private void onDidChangeCursorSelectionTarget(CursorSelectionChangedEvent eventArgs)
    //{

    //}

    private async Task AddCopyTagAction()
    {//https://stackoverflow.com/questions/64057359/difference-between-editor-addaction-and-editor-addcommand-and-their-use-case
        await _editorSource.AddAction("CopyTag", "Copy Tag with Attributes",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_T },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyTag()
);
    }

    private async Task ValidateXML()
    {
        try
        {
            AppState.isWorking();
            validationErrors.Clear();
            await Task.Delay(1);

            byte[] byteArrayX = Encoding.ASCII.GetBytes(await _editorTarget.GetValue());
            MemoryStream streamX = new MemoryStream(byteArrayX);
            XmlReader reader = XmlReader.Create(streamX);

            XmlDocument document = new XmlDocument();
            document.Load(reader);
            document.Schemas = schemaSet;

            document.Validate(eventHandler);
        }
        catch (Exception e)
        {
            validationErrors.Add(e.Message);
            //throw;
        }
        finally
        {
            AppState.notWorking();
            ShowValModal();
        }
    }

    void ShowValModal()
    {
        if (validationErrors.Count > 0)
        {
            string msg = "";
            foreach (string s in validationErrors)
            {
                msg = msg + s + Environment.NewLine;
            }
            Helpers.ShowModal(msg, Modal);
        }
    }

    static void ValidationEventHandler(object sender, ValidationEventArgs e)
    {
        switch (e.Severity)
        {
            case XmlSeverityType.Error:
                Console.WriteLine("Error: {0}", e.Message);
                break;
            case XmlSeverityType.Warning:
                Console.WriteLine("Warning {0}", e.Message);
                break;
        }
        validationErrors.Add(e.Message);
    }

    private async Task Download()
    {
        if (await js.InvokeAsync<int>("isChrome") > -1)
        {
            var w1 = await js.InvokeAsync<string>("getWidth", "editor-source");
            var w2 = await js.InvokeAsync<string>("getWidth", "editor-target");
            var h1 = await js.InvokeAsync<string>("getHeight", "editor-source");
            var h2 = await js.InvokeAsync<string>("getHeight", "editor-target");

            await js.InvokeVoidAsync("setSize", "editor-source", w1, h1);
            await js.InvokeVoidAsync("setSize", "editor-target", w2, h2);
        }

        byte[] file = System.Text.Encoding.UTF8.GetBytes(await _editorTarget.GetValue());
        await js.InvokeVoidAsync("BlazorDownloadFile", lblTarget, "text/xml", file);


    }

    //private async Task<string[]> DisplayDecoration(MonacoEditor editor, int iRow)
    //{
    //    var newDecorations = new ModelDeltaDecoration[]
    //    {
    //        new ModelDeltaDecoration
    //        {
    //            Range = new BlazorMonaco.Range(iRow,1,iRow,3),
    //            Options = new ModelDecorationOptions
    //            {
    //                IsWholeLine = true,
    //                ClassName = "decorationContentClass",
    //                GlyphMarginClassName = "decorationGlyphMarginClass"
    //            }
    //        }
    //                                                                                                                                                    };
    //    return await editor.DeltaDecorations(null, newDecorations);
    //}
}
