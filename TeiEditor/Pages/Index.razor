@page "/"
@using System.Net.Http
@using System.Text
@using System.Xml;
@inject HttpClient _client
@*<div>
    <div style="margin:10px 0;">
                    New Value: <input type="text" @bind="ValueToSet" style="width: 400px;" /> <button @onclick="SetValue">Set Value</button>
                </div>
                <div style="margin:10px 0;">
                    <button @onclick="GetValue">Get Value</button>
                </div>
        </div>*@
<div class="container-fluid">
    <div class="row w-100" style="margin-bottom:5px">
        <div class="col">
            <div class="row">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnSourceFileChange" class="custom-file-input" />
                    @lblChooseSource
                </div>
                <div class="col-8" style="padding-top:3px!important">@lblInput</div>
            </div>
            <div class="row">
                <div class="col">
                    <MonacoEditor @ref="_editorSource" Id="editor-source" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInitSource" OnContextMenu="OnContextMenuSource" />
                </div>
            </div>
        </div>
        <div class="col">
            <div class="row">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnTargetFileChange" />
                    @lblChooseTarget
                </div>
                <div class="col-8" style="padding-top:3px!important">@lblInput2</div>
            </div>
            <div class="row">
                <div class="col">
                    <MonacoEditor @ref="_editorTarget" Id="editor-target" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInitTarget" OnContextMenu="OnContextMenuTarget" />
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private MonacoEditor _editorSource { get; set; }
    private MonacoEditor _editorTarget { get; set; }
    private List<string> lSourceLines = new List<string>();
    private List<string> lTargetLines = new List<string>();
    private string ValueToSet { get; set; }
    private string[] decorationIdsSource;
    private string[] decorationIdsTarget;
    private string lblInput = "";
    private string lblChooseSource = "Choose Source";
    private string lblInput2 = "";
    private string lblChooseTarget = "Choose Target";

    private async Task OnSourceFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 3;
        var format = "image/png";

        lblInput = e.File.Name;
        lblChooseSource = "Source: ";
        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,
                100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            //imageDataUrls.Add(imageDataUrl);
        }
    }

    private async Task OnTargetFileChange(InputFileChangeEventArgs e)
    {
        lblInput2 = e.File.Name;
        lblChooseTarget = "Target: ";
    }
    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            GlyphMargin = true,
            AutomaticLayout = true
        };
    }

    private async Task EditorOnDidInitSource(MonacoEditorBase editor)
    {
        lSourceLines = await LoadXMLfromFile(_editorSource, "data/AsherBT20210210.xml");

        decorationIdsSource = await DisplayDecoration(_editorSource, 4);
        // You can now use 'decorationIds' to change or remove the decorations
    }
    private async Task EditorOnDidInitTarget(MonacoEditorBase editor)
    {
        lTargetLines = await LoadXMLfromFile(_editorTarget, "data/BTAdler20210210.xml");

        decorationIdsTarget = await DisplayDecoration(_editorTarget, 2);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private async Task<string[]> DisplayDecoration(MonacoEditor editor, int iRow)
    {
        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Bridge.Range(iRow,1,iRow,3),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
                                };
        return await editor.DeltaDecorations(null, newDecorations);
    }

    private async Task<List<string>> LoadXMLfromFile(MonacoEditor editor, string filePath)
    {
        var bytesOfXML = await _client.GetByteArrayAsync(filePath);
        string stringOfXML = Encoding.UTF8.GetString(bytesOfXML);
        TextModel model = await MonacoEditorBase.CreateModel(stringOfXML, "xml");
        await editor.SetModel(model);

        List<string> lLines = stringOfXML.Split("\n").ToList<string>();
        return lLines;
    }

    private void OnContextMenuSource(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }
    private void OnContextMenuTarget(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task SetValue()
    {
        Console.WriteLine($"setting value to: {ValueToSet}");
        await _editorSource.SetValue(ValueToSet);
    }

    private async Task GetValue()
    {
        var val = await _editorSource.GetValue();
        Console.WriteLine($"value is: {val}");
    }

    private async Task AddCommand()
    {//https://github.com/microsoft/monaco-editor/issues/1901#issuecomment-609018281
        await _editorSource.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.Enter, (editor, keyCode) =>
        {
            Console.WriteLine("Ctrl+Enter : Editor command is triggered.");
        });
    }

    private async Task AddAction()
    {//https://stackoverflow.com/questions/64057359/difference-between-editor-addaction-and-editor-addcommand-and-their-use-case
        await _editorSource.AddAction("testAction", "Test Action", new int[] { (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_D, (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_B }, null, null, "navigation", 1.5, (editor, keyCodes) =>
        {
            Console.WriteLine("Ctrl+D : Editor action is triggered.");
        });
    }
}
