@page "/"

@using System.IO
@using System.Net.Http
@using System.Text
@using System.Xml;
@using System.Xml.Schema;

@inject IJSRuntime js
@inject HttpClient _client
@inject AppState AppState

<div class="container-fluid">
    <div class="row " id="top-container">
        <div class="col">
            <div class="row" style="margin-bottom:5px">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnSourceFileChange" accept=".xml" />
                    @lblChooseSource
                </div>
                <div class="col-5" style="padding-top:3px!important">@lblSource</div>
                <div class="col-1">
                    <Dropdown TItem="string" OnSelected="@OnSourceCommandSelected">
                        <InitialTip>Actions</InitialTip>
                        <ChildContent>
                            <DropdownListItem Item="@actionList[0]">Highlight</DropdownListItem>
                            <div class="dropdown-divider"></div>
                            <DropdownListItem Item="@actionList[1]">Validate</DropdownListItem>
                            <DropdownListItem Item="@actionList[2]">Save</DropdownListItem>
                        </ChildContent>
                    </Dropdown>

                </div>
            </div>
            <div class="row">
                <div class="col" style="padding-left:0!important;">
                    <MonacoEditor @ref="_editorSource" Id="editor-source" ConstructionOptions="EditorConstructionOptions"
                                  OnDidInit="OnDidInitSource" OnContextMenu="OnContextMenuSource" OnMouseDown="onMouseDownSource" />
                </div>
            </div>
        </div>
        <div class="col">
            <div class="row" style="margin-bottom:5px">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnTargetFileChange" accept=".xml" />
                    @lblChooseTarget
                </div>
                <div class="col-5" style="padding-top:3px!important">@lblTarget</div>
                <div class="col-1">
                    <Dropdown TItem="string" OnSelected="@OnTargetCommandSelected">
                        <InitialTip>Actions</InitialTip>
                        <ChildContent>
                            <DropdownListItem Item="@actionList[1]">Validate</DropdownListItem>
                            <DropdownListItem Item="@actionList[2]">Save</DropdownListItem>
                        </ChildContent>
                    </Dropdown>
                </div>
            </div>
            <div class="row">
                <div class="col" style="padding-left: 0 !important">
                    <MonacoEditor @ref="_editorTarget" Id="editor-target" ConstructionOptions="EditorConstructionOptions" OnDidInit="OnDidInitTarget" OnContextMenu="OnContextMenuTarget" OnMouseDown="onMouseDownTarget" /> @*onDidChangeCursorSelection="onDidChangeCursorSelectionTarget" />*@
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private MonacoEditor _editorSource { get; set; }
    private MonacoEditor _editorTarget { get; set; }
    //private List<string> lTargetLines = new List<string>();
    //private string ValueToSet { get; set; }
    private Dictionary<string, BlazorMonaco.Range> sourceDecorations = new Dictionary<string, BlazorMonaco.Range>();
    private Dictionary<string, BlazorMonaco.Range> targetDecorations = new Dictionary<string, BlazorMonaco.Range>();
    private Dictionary<string, string> sourceLookup = new Dictionary<string, string>();//<decoration key, attrib value>
    private Dictionary<string, string> targetLookup = new Dictionary<string, string>();//<decoration key, attrib value>
    private string lblSource = "";
    private string lblChooseSource = "Choose Source";
    private string lblTarget = "";
    private string lblChooseTarget = "Choose Target";
    ValidationEventHandler eventHandler = new ValidationEventHandler(ValidationEventHandler);
    [CascadingParameter] public IModalService Modal { get; set; }
    string[] actionList = new string[3] { "mark", "validate", "save" };

    private async void OnTargetCommandSelected(string action)
    {
        switch (action)
        {
            case "validate": await ValidateXML(_editorTarget); break;
            case "save": await Download(lblTarget, _editorTarget); break;
        }
    }

    private async void OnSourceCommandSelected(string action)
    {
        switch (action)
        {
            case "mark": await markTags(); break;
            case "validate": await ValidateXML(_editorSource); break;
            case "save": await Download(lblSource, _editorSource); break;
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                GlyphMargin = true,
                AutomaticLayout = true,
                WordWrap = "on"
            };
    }

    protected async override void OnInitialized()
    {
        AppState.isWorking();
        await Task.Delay(1);
        await AddCopyTagActions();
        Helpers.validationErrors = new List<string>();
        await _editorSource.SetValue("");
        await _editorTarget.SetValue("");

        AppState.PageMode = enmPage.X2X;
        AppState.OpMode = enmOpMode.CopyTagWithAttribs;

        //load schemaSet for validation
        await Helpers.ensureLoadedSchemas(_client);

        AppState.notWorking();

        //debug
        await Helpers.LoadXM2Debug(_editorSource, "files/Dybbuk125withXMLID.xml", _client);
        await Helpers.LoadXM2Debug(_editorTarget, "files/DIBBUK303.xml", _client);
        AppState.OpMode = enmOpMode.CopyAttribute;
        AppState.tagName = "sp";
        AppState.attribName = "xml:id";
        await markTags();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (!firstRender) await js.InvokeVoidAsync("showCurrentNav", "mainNav");
    }

    private async Task OnDidInitSource(MonacoEditorBase editor)
    {
        await js.InvokeVoidAsync("registerResize");
        var i = await js.InvokeAsync<string>("resizeEditors", "editor-source");
        //sourceDecorations = await DisplayDecoration(_editorSource, 4);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private async Task OnDidInitTarget(MonacoEditorBase editor)
    {

        var i = await js.InvokeAsync<string>("resizeEditors", "editor-target");
    }

    private void OnContextMenuSource(EditorMouseEvent eventArg)
    {
        // To disable menu options according to mode:
        // https://stackoverflow.com/questions/62001650/how-to-open-context-menu-in-monaco-editor-based-on-line-content-in-angular
        // requires an implementation of MonacoEditorBase.createContextKey
    }

    private async Task<string> align(string key1,
        Dictionary<string, string> lookup1, Dictionary<string, string> lookup2,
        MonacoEditor editor, Dictionary<string, BlazorMonaco.Range> decorations,
        string RangeId)
    {
        if (key1 != null)
        {
            string attribVal = lookup1.Where(d => d.Key == key1).Select(d => d.Value).FirstOrDefault();
            if (!string.IsNullOrEmpty(attribVal))
            {
                string key2 = lookup2.Where(d => d.Value == attribVal).Select(d => d.Key).FirstOrDefault();
                if (!string.IsNullOrEmpty(key2))
                {
                    await editor.RevealRangeInCenter(decorations[key2]);
                    await Helpers.RemoveDecoration(editor, RangeId);//remove previous colorin on other editor
                    RangeId = await Helpers.ColorRange(editor, decorations[key2], "", enmStatusColor.Current);
                    return RangeId;
                }
            }
        }
        await Helpers.RemoveDecoration(editor, RangeId);
        return null;
    }

    private async void onMouseDownSource(EditorMouseEvent eventArg)
    {
        await Helpers.markWholeTag(AppState.tagName,
            eventArg.Target.Position, eventArg.Event.LeftButton,
            _editorSource, sourceDecorations);

        if (AppState.OpMode == enmOpMode.AlignSelectedTag || AppState.OpMode == enmOpMode.FindNoCorresponding)
        {
            Helpers.otherRangeId = await align(Helpers.currentDec.Key, sourceLookup, targetLookup,
                _editorTarget, targetDecorations, Helpers.otherRangeId);
        }
    }

    private async void onMouseDownTarget(EditorMouseEvent eventArg)
    {

        if (AppState.OpMode == enmOpMode.AlignSelectedTag ||
            AppState.OpMode == enmOpMode.FindNoCorresponding ||
            AppState.OpMode == enmOpMode.CopyAttribute
        )
        {
            await Helpers.markWholeTag(AppState.tagName,
            eventArg.Target.Position, eventArg.Event.LeftButton,
            _editorTarget, targetDecorations, true);
            if (AppState.OpMode != enmOpMode.CopyAttribute)
            {
                Helpers.currentRangeId = await align(Helpers.otherDec.Key, targetLookup, sourceLookup,
                    _editorSource, sourceDecorations, Helpers.currentRangeId);
            }
        }
    }

    private void OnContextMenuTarget(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task OnSourceFileChange(InputFileChangeEventArgs e)
    {
        lblSource = e.File.Name;
        lblChooseSource = "Source: ";

        if (e.File.Size > 512000) lblSource = $"{lblSource} is larger than 500kb!";
        else await Helpers.LoadXMLfromFile(_editorSource, e.File);
    }

    private async Task OnTargetFileChange(InputFileChangeEventArgs e)
    {
        lblTarget = e.File.Name;
        lblChooseTarget = "Target: ";

        if (e.File.Size > 512000) lblTarget = $"{lblTarget} is larger than 500kb!";
        else await Helpers.LoadXMLfromFile(_editorTarget, e.File);
    }

    private async Task AddCopyTagActions()
    {
        //https://stackoverflow.com/questions/64057359/difference-between-editor-addaction-and-editor-addcommand-and-their-use-case
        //
        await _editorTarget.AddAction("CopyTag", "Copy Tag with Attributes",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_S },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyTag());
        await _editorTarget.AddAction("CopyTagMoveNext", "Copy Tag with Attributes & Move to Next",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_D },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyTagAndMove());
        await _editorTarget.AddAction("CopyTagWNewAttrib", "Copy Tag with New Attribute",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_N },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyTagWNew());
        await _editorTarget.AddAction("CopyTagWNewAttribMoveNext", "Copy Tag with New Attribute & Move to Next",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_M },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyTagWNewAndMove());

        await _editorTarget.AddAction("CopyAttrib", "Copy Attribute",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_B },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyAttrib());
        await _editorTarget.AddAction("CopyAttribMoveNext", "Copy Attribute & Move to Next",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_A },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyAttribAndMove());
    }

    private async Task ValidateXML(MonacoEditor editor)
    {
        await Helpers.ValidateXML(AppState, Modal, editor, eventHandler);
    }

    static void ValidationEventHandler(object sender, ValidationEventArgs e)
    {
        switch (e.Severity)
        {
            case XmlSeverityType.Error:
                Console.WriteLine("Error: {0}", e.Message);
                break;
            case XmlSeverityType.Warning:
                Console.WriteLine("Warning {0}", e.Message);
                break;
        }
        Helpers.validationErrors.Add(e.Message);
    }

    private async Task Download(string lbl, MonacoEditor editor)
    {
        await Helpers.Download(lbl, AppState, Modal, editor, js, true);
    }

    private async Task markTags()
    {
        AppState.isWorking();
        await Task.Delay(1);

        await Helpers.markTags(_editorSource, AppState.tagName, sourceDecorations);

        if (AppState.OpMode == enmOpMode.AlignSelectedTag || AppState.OpMode == enmOpMode.FindNoCorresponding || AppState.OpMode == enmOpMode.CopyAttribute)
        {
            await Helpers.markTags(_editorTarget, AppState.tagName, targetDecorations);
            sourceLookup = await Helpers.GetDecorationTagAttribs(AppState.tagName, AppState.attribName, _editorSource, sourceDecorations);
            targetLookup = await Helpers.GetDecorationTagAttribs(AppState.tagName, AppState.attribName, _editorTarget, targetDecorations);
        }

        if (AppState.OpMode == enmOpMode.FindNoCorresponding)
        {
            await HighlightMissing(sourceLookup, targetLookup, _editorSource, sourceDecorations);
            await HighlightMissing(targetLookup, sourceLookup, _editorTarget, targetDecorations);
        }

        AppState.notWorking();
    }

    private async Task HighlightMissing(Dictionary<string, string> lookup1,
                                        Dictionary<string, string> lookup2,
                                        MonacoEditor editor,
                                        Dictionary<string, BlazorMonaco.Range> decorations
                                    )
    {
        bool alreadyRevealed = false;
        bool doAdd;
        foreach (KeyValuePair<string, string> attribKey in lookup1)
        {
            doAdd = true;
            string otherAttrib = lookup2.Where(k => k.Value == attribKey.Value).Select(k => k.Value).FirstOrDefault();
            if (string.IsNullOrEmpty(otherAttrib))
            {
                TextModel model = await editor.GetModel();

                BlazorMonaco.Range decRange = decorations[attribKey.Key];
                string tag = await model.GetValueInRange(decRange, EndOfLinePreference.CRLF);
                bool closedTag = Helpers.IsClosedTag(tag);

                XmlDocument node =  Helpers.getTagXMLNode(tag, AppState.tagName, closedTag);
                foreach (XmlAttribute attrb in node.DocumentElement.Attributes)
                {
                    if (attrb.Name == AppState.newAttribName) doAdd = false; //attrib exists and will not be changed
                }

                if (doAdd)
                {
                    string sNewAttrib = $" {AppState.newAttribName}=\"noCorresp\"";
                    if (closedTag) tag = tag.Replace("/>", $"{sNewAttrib}/>");
                    else tag = tag.Replace(">", $"{sNewAttrib}>");

                    List<Selection> lSelections = new List<Selection>()
                        {
                           new Selection()
                           {
                           StartLineNumber=decRange.EndLineNumber,
                           EndLineNumber=decRange.EndLineNumber,
                           StartColumn=decRange.EndColumn,
                           EndColumn=decRange.EndColumn
                           }
                        };
                    List<IdentifiedSingleEditOperation> lOpEd = new List<IdentifiedSingleEditOperation>()
                        {
                            new IdentifiedSingleEditOperation()
                            {
                                Range = decRange,
                                Text = tag
                            }
                        };
                    await editor.ExecuteEdits("source", lOpEd, lSelections);

                    //may need to move following tags if on the last line of current tag
                    var tagsOnLine = from d in decorations where d.Value.StartLineNumber == decRange.EndLineNumber select d;
                    foreach (KeyValuePair<string, BlazorMonaco.Range> d in tagsOnLine)
                    {
                        d.Value.StartColumn = d.Value.StartColumn + sNewAttrib.Length;
                        if (d.Value.EndLineNumber == decRange.EndLineNumber) d.Value.EndColumn = d.Value.EndColumn + sNewAttrib.Length;
                    }

                    if (decRange.StartLineNumber == decRange.EndLineNumber)
                    {//tag on one line
                        decorations[attribKey.Key].StartColumn = decorations[attribKey.Key].StartColumn - sNewAttrib.Length;
                    }
                    else
                    {//tag on more then one line
                        decorations[attribKey.Key].EndColumn = decorations[attribKey.Key].EndColumn + sNewAttrib.Length;
                    }
                }

                await Helpers.ColorRange(editor, decorations[attribKey.Key], attribKey.Key, enmStatusColor.Warning);
                if (!alreadyRevealed)
                {
                    await editor.RevealRangeInCenter(decorations[attribKey.Key]);
                    alreadyRevealed = true;
                }
            }
        }
    }

    private KeyValuePair<string, BlazorMonaco.Range>
        getNextDec(KeyValuePair<string, BlazorMonaco.Range>
            currentDec)
    {
        KeyValuePair<string, BlazorMonaco.Range>
            nextDec = new KeyValuePair<string, BlazorMonaco.Range>
                ();
        int nextI = 0;

        for (int i = 0; i < sourceDecorations.Keys.Count; i++)
        {
            if (sourceDecorations.ElementAt(i).Key == currentDec.Key)
            {
                nextI = i + 1;
                break;
            }
        }
        if (nextI < sourceDecorations.Keys.Count)
        {
            nextDec = sourceDecorations.ElementAt(nextI);
        }

        return nextDec;
    }

    private async Task CopyTag(bool newTagVal = false, bool moveToNext = false)
    {
        string msg = "";
        switch (AppState.OpMode)
        {
            case enmOpMode.AlignSelectedTag:
            case enmOpMode.FindNoCorresponding:
            case enmOpMode.CopyAttribute:
            case enmOpMode.None:
                msg = "Please select mode in configuration";
                break;
            case enmOpMode.CopyTagWithAttribs:
                if (newTagVal) msg = "Mode is not 'Copy tag with NEW attribute'";
                break;
            case enmOpMode.CopyTagWithNewAttribs:
                if (!newTagVal) msg = "Mode is 'Copy tag with NEW attribute'";
                break;
        }
        if (msg != "")
        {
            Helpers.ShowModal(msg, Modal);
            return;
        }

        KeyValuePair<string, BlazorMonaco.Range> dec = Helpers.currentDec;
        if (!string.IsNullOrEmpty(dec.Key))
        {
            List<IdentifiedSingleEditOperation> lOpEd;
            BlazorMonaco.Range decRange = dec.Value;
            TextModel sourceModel = await _editorSource.GetModel();
            string tag = await sourceModel.GetValueInRange(decRange, EndOfLinePreference.CRLF);
            tag = tag.Replace("\t", "").Replace("\r", "").Replace("\n", "");
            if (newTagVal)
            {
                bool emptyTag = Helpers.IsClosedTag(tag);
                XmlDocument node = Helpers.getTagXMLNode(tag, AppState.tagName, emptyTag);
                foreach (XmlAttribute attrb in node.DocumentElement.Attributes)
                {
                    if (attrb.Name == AppState.attribName) attrb.Value = (AppState.attribStartVal++).ToString();
                }
                if (emptyTag) tag = node.OuterXml;
                else tag = node.OuterXml.Substring(0, node.OuterXml.IndexOf("</"));
            }


            Selection targetSel = await _editorTarget.GetSelection();
            BlazorMonaco.Range targetStartRange = new BlazorMonaco.Range(targetSel.StartLineNumber, targetSel.StartColumn, targetSel.StartLineNumber, targetSel.StartColumn);
            BlazorMonaco.Range targetEndRange = new BlazorMonaco.Range(targetSel.EndLineNumber, targetSel.EndColumn, targetSel.EndLineNumber, targetSel.EndColumn);
            List<Selection> lSelections = new List<Selection>() { targetSel };


            ///insert tag on target
            if (targetSel.StartLineNumber != targetSel.EndLineNumber || targetSel.StartColumn != targetSel.EndColumn)
            {//a range is selected
                string endTag = $"</{AppState.tagName}>";
                lOpEd = new List<IdentifiedSingleEditOperation>
                    () {
                    new IdentifiedSingleEditOperation() {
                    Range = targetStartRange,
                    Text = tag},
                    new IdentifiedSingleEditOperation() {
                    Range = targetEndRange,
                    Text = endTag }
                    };
                await _editorTarget.ExecuteEdits("source", lOpEd, lSelections);

                if (targetSel.StartLineNumber == targetSel.EndLineNumber)
                {// adding on one line, need to take into acount both opening and closing tags
                    if (!Helpers.IsClosedTag(tag)) targetSel.EndColumn += tag.Length;// add opening tag
                    else targetSel.EndColumn += tag.Length - 1;//opening tag removes '/'
                }
                targetSel.EndColumn += endTag.Length;//always add closing tag
            }
            else
            {//insert at cursor
                lOpEd = new List<IdentifiedSingleEditOperation>
                    () {
                        new IdentifiedSingleEditOperation() {
                        Range = targetStartRange,
                        Text = Helpers.CloseTag(tag)}
                        };
                await _editorTarget.ExecuteEdits("source", lOpEd, lSelections);
                if (tag.IndexOf("/>") != -1) targetSel.EndColumn += tag.Length;//for painting target
                else targetSel.EndColumn += tag.Length + 1;//closing tag adds '/'
            }

            //paint source for done
            await Helpers.ColorRange(_editorSource, dec.Value, dec.Key);

            //paint target for done
            await Helpers.ColorRange(_editorTarget, targetSel);

            if (moveToNext)
            {
                //select next marked tag
                KeyValuePair<string, BlazorMonaco.Range>
                    nextDec = getNextDec(dec);
                if (!string.IsNullOrEmpty(nextDec.Key))
                {
                    Position nextPos = new Position() { LineNumber = nextDec.Value.StartLineNumber, Column = nextDec.Value.StartColumn };
                    await Helpers.markWholeTag(AppState.tagName, nextPos, true, _editorSource, sourceDecorations);
                    await _editorSource.RevealRangeInCenter(nextDec.Value);
                }
            }
        }
    }

    private async void CopyTagAndMove()
    {
        await CopyTag(moveToNext: true);
    }

    private async void CopyTagWNew()
    {
        await CopyTag(newTagVal: true);
    }

    private async void CopyTagWNewAndMove()
    {
        await CopyTag(newTagVal: true, moveToNext: true);
    }

    private async Task CopyAttribute(bool moveToNext = false)
    {
        string msg = "";
        switch (AppState.OpMode)
        {
            case enmOpMode.AlignSelectedTag:
            case enmOpMode.FindNoCorresponding:
            case enmOpMode.CopyTagWithAttribs:
            case enmOpMode.None:
            case enmOpMode.CopyTagWithNewAttribs:
                msg = "Please select mode in configuration";
                Helpers.ShowModal(msg, Modal);
                return;
        }

        string attribVal = "";
        KeyValuePair<string, BlazorMonaco.Range> targetDec = Helpers.otherDec;
        KeyValuePair<string, BlazorMonaco.Range> sourceDec = Helpers.currentDec;
        if(sourceDec.Key==null || targetDec.Key==null)
        {
            msg = $"Click an <{AppState.tagName}> node on both files!";
            Helpers.ShowModal(msg, Modal);
            return;
        }
        if (!string.IsNullOrEmpty(sourceDec.Key))
        {
            List<IdentifiedSingleEditOperation> lOpEd;
            TextModel sourceModel = await _editorSource.GetModel();

            //find source attribute value
            XmlDocument node = await Helpers.getTagXMLNode(sourceDec.Value, sourceModel, AppState.tagName, true);
            foreach (XmlAttribute attrb in node.DocumentElement.Attributes)
            {
                if (attrb.Name == AppState.attribName) attribVal = attrb.Value;
            }

            //adding or updating attribute on target
            TextModel targetModel = await _editorTarget.GetModel();
            string tag =await targetModel.GetValueInRange(targetDec.Value, EndOfLinePreference.CRLF);
            bool emptyTag = Helpers.IsClosedTag(tag);
            node = Helpers.getTagXMLNode(tag, AppState.tagName, emptyTag);
            enmCopyAttribOp operation = enmCopyAttribOp.newAttrib;
            string oldAttribVal = "";
            foreach (XmlAttribute attrb in node.DocumentElement.Attributes)
            {
                if (attrb.Name == AppState.attribName)
                {
                    if (attrb.Value == attribVal) operation = enmCopyAttribOp.noChange;
                    else
                    {
                        operation = enmCopyAttribOp.newValue;
                        oldAttribVal = attrb.Value;
                    }
                }
            }
            string sNewAttrib = $" {AppState.attribName}=\"{attribVal}\"";
            string sOldAttrib="";
            int lastLineChange=0;
            switch(operation){
                case enmCopyAttribOp.newAttrib:
                    lastLineChange = sNewAttrib.Length; //change in tag length that may affect next tag if on the same line
                    if (emptyTag) tag = tag.Replace("/>", $"{sNewAttrib}/>");
                    else tag = tag.Replace(">", $"{sNewAttrib}>");
                    break;
                case enmCopyAttribOp.newValue:
                    sOldAttrib = $" {AppState.attribName}=\"{attribVal}\"";
                    //ignored X2T2X (line 168) checking if there is a line-break after original attribute
                    lastLineChange=sNewAttrib.Length - sOldAttrib.Length;
                    tag = tag.Replace(sOldAttrib, sNewAttrib);
                    break;
            }
            List<Selection> lSelections = new List<Selection>()
            {
                new Selection()
                {
                    StartLineNumber=targetDec.Value.EndLineNumber,
                    EndLineNumber=targetDec.Value.EndLineNumber,
                    StartColumn=targetDec.Value.EndColumn,
                    EndColumn=targetDec.Value.EndColumn
                }
            };
            lOpEd = new List<IdentifiedSingleEditOperation>() {
                new IdentifiedSingleEditOperation() 
                {
                    Range = targetDec.Value,
                    Text = tag
                }
            };
            await _editorSource.ExecuteEdits("target", lOpEd, lSelections);
            if (lastLineChange != 0)
            {//may need to move following tags if on the last line of current tag
                var tagsOnLine = from d in targetDecorations where d.Value.StartLineNumber == targetDec.Value.EndLineNumber select d;
                foreach (KeyValuePair<string, BlazorMonaco.Range> d in tagsOnLine)
                {
                    d.Value.StartColumn = d.Value.StartColumn + lastLineChange;
                    if (d.Value.EndLineNumber == targetDec.Value.EndLineNumber) d.Value.EndColumn = d.Value.EndColumn + lastLineChange;
                }
            }
        }
    }
    private enum enmCopyAttribOp{ noChange, newValue, newAttrib}
    private async void CopyAttrib(bool moveToNext = false)
    {
        await CopyAttribute();
    }
    private async void CopyAttribAndMove()
    {
        await CopyAttribute(moveToNext: true);
    }
    }
}
