@page "/"

@using System.IO
@using System.Net.Http
@using System.Text
@using System.Xml;
@using System.Xml.Schema;

@inject IJSRuntime js
@inject HttpClient _client
@inject AppState AppState

<div class="container-fluid">
    <div class="row " id="top-container">
        <div class="col">
            <div class="row" style="margin-bottom:5px">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnSourceFileChange" accept=".xml" />
                    @lblChooseSource
                </div>
                <div class="col-5" style="padding-top:3px!important">@lblSource</div>
                <div class="col-3">
                    <button @onclick="markTags" class="myButton">Mark</button>
                </div>
            </div>
            <div class="row">
                <div class="col" style="padding-left:0!important;">
                    <MonacoEditor @ref="_editorSource" Id="editor-source" ConstructionOptions="EditorConstructionOptions"
                                  OnDidInit="OnDidInitSource" OnContextMenu="OnContextMenuSource" OnMouseDown="onMouseDownSource" />
                </div>
            </div>
        </div>
        <div class="col">
            <div class="row" style="margin-bottom:5px">
                <div class="col-3 file-input-zone">
                    <InputFile OnChange="@OnTargetFileChange" accept=".xml" />
                    @lblChooseTarget
                </div>
                <div class="col-4" style="padding-top:3px!important">@lblTarget</div>
                <div class="col-4">
                    <button @onclick="ValidateXML" class="myButton">Validate</button>
                    <button @onclick="Download" class="myButton">Save</button>
                </div>
            </div>
            <div class="row">
                <div class="col" style="padding-left: 0 !important">
                    <MonacoEditor @ref="_editorTarget" Id="editor-target" ConstructionOptions="EditorConstructionOptions" OnDidInit="OnDidInitTarget" OnContextMenu="OnContextMenuTarget" /> @*onDidChangeCursorSelection="onDidChangeCursorSelectionTarget" />*@
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private MonacoEditor _editorSource { get; set; }
    private MonacoEditor _editorTarget { get; set; }
    //private List<string> lTargetLines = new List<string>();
    //private string ValueToSet { get; set; }
    private Dictionary<string, BlazorMonaco.Range> sourceDecorations = new Dictionary<string, BlazorMonaco.Range>();
    private string[] decorationIdsTarget;
    private string lblSource = "";
    private string lblChooseSource = "Choose Source";
    private string lblTarget = "";
    private string lblChooseTarget = "Choose Target";
    ValidationEventHandler eventHandler = new ValidationEventHandler(ValidationEventHandler);
    [CascadingParameter] public IModalService Modal { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            GlyphMargin = true,
            AutomaticLayout = true,

        };
    }

    protected async override void OnInitialized()
    {
        AppState.isWorking();
        await Task.Delay(1);
        await AddCopyTagActions();
        Helpers.validationErrors = new List<string>();
        await _editorSource.SetValue("");
        await _editorTarget.SetValue("");

        AppState.PageMode = enmPage.X2X;
        AppState.OpMode = enmOpMode.CopyTagWithAttribs;

        //load schemaSet for validation
        if (Helpers.schemaSet.Count == 0)
        {
            await Helpers.loadSchema("data/tei_all.xsd", "http://www.tei-c.org/ns/1.0", _client);
            await Helpers.loadSchema("data/tei_all_dcr.xsd", "http://www.isocat.org/ns/dcr", _client);
            await Helpers.loadSchema("data/tei_all_teix.xsd", "http://www.tei-c.org/ns/Examples", _client);
            await Helpers.loadSchema("data/tei_all_xml.xsd", "http://www.w3.org/XML/1998/namespace", _client);
        }

        AppState.notWorking();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (!firstRender) await js.InvokeVoidAsync("showCurrentNav", "mainNav");
    }

    private async Task OnDidInitSource(MonacoEditorBase editor)
    {
        await js.InvokeVoidAsync("registerResize");
        var i = await js.InvokeAsync<string>("resizeEditors", "editor-source");
        //sourceDecorations = await DisplayDecoration(_editorSource, 4);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private async Task OnDidInitTarget(MonacoEditorBase editor)
    {

        var i = await js.InvokeAsync<string>("resizeEditors", "editor-target");
    }

    private void OnContextMenuSource(EditorMouseEvent eventArg)
    {
        // To disable menu options according to mode:
        // https://stackoverflow.com/questions/62001650/how-to-open-context-menu-in-monaco-editor-based-on-line-content-in-angular
        // requires an implementation of MonacoEditorBase.createContextKey
    }

    private async void onMouseDownSource(EditorMouseEvent eventArg)
    {
        await Helpers.markWholeTag(AppState.tagName, eventArg, _editorSource, sourceDecorations);
    }

    private void OnContextMenuTarget(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task OnSourceFileChange(InputFileChangeEventArgs e)
    {
        lblSource = e.File.Name;
        lblChooseSource = "Source: ";

        if (e.File.Size > 512000) lblSource = $"{lblSource} is larger the 500kb!";
        else await Helpers.LoadXMLfromFile(_editorSource, e.File);
    }

    private async Task OnTargetFileChange(InputFileChangeEventArgs e)
    {
        lblTarget = e.File.Name;
        lblChooseTarget = "Target: ";

        if (e.File.Size > 512000) lblTarget = $"{lblTarget} is larger the 500kb!";
        else await Helpers.LoadXMLfromFile(_editorTarget, e.File);
    }

    private async Task AddCopyTagActions()
    {
        //https://stackoverflow.com/questions/64057359/difference-between-editor-addaction-and-editor-addcommand-and-their-use-case
        //
        await _editorTarget.AddAction("CopyTag", "Copy Tag with Attributes",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_S },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyTag());
        await _editorTarget.AddAction("CopyTagWNewAttrib", "Copy Tag with New Attribute",
            new int[] { (int)KeyMode.Shift | (int)KeyCode.KEY_N },
            null, null, "navigation", 1.5, (editor, keyCodes) => CopyTagWNew());
    }

    private async Task ValidateXML()
    {
        await Helpers.ValidateXML(AppState, Modal, _editorTarget, eventHandler);
    }

    static void ValidationEventHandler(object sender, ValidationEventArgs e)
    {
        switch (e.Severity)
        {
            case XmlSeverityType.Error:
                Console.WriteLine("Error: {0}", e.Message);
                break;
            case XmlSeverityType.Warning:
                Console.WriteLine("Warning {0}", e.Message);
                break;
        }
        Helpers.validationErrors.Add(e.Message);
    }

    private async Task Download()
    {
        await Helpers.Download(lblTarget, AppState, Modal, _editorTarget, js, true);
    }

    private async Task markTags()
    {
        AppState.isWorking();
        await Task.Delay(1);

        await Helpers.markTags(_editorSource, AppState.tagName, sourceDecorations);

        AppState.notWorking();
    }

    private async Task CopyTag(bool newTagVal = false)
    {
        string msg = "";
        switch (AppState.OpMode)
        {
            case enmOpMode.None:
                msg = "Please select mode in configuration";
                break;
            case enmOpMode.CopyTagWithAttribs:
                if (newTagVal) msg = "Mode is not 'Copy tag with NEW attribute'";
                break;
            case enmOpMode.CopyTagWithNewAttribs:
                if (!newTagVal) msg = "Mode is 'Copy tag with NEW attribute'";
                break;
        }
        if (msg != "")
        {
            Helpers.ShowModal(msg, Modal);
            return;
        }

        KeyValuePair<string, BlazorMonaco.Range> dec =Helpers.currentDec;
        if (!string.IsNullOrEmpty(dec.Key))
        {
            BlazorMonaco.Range decRange = dec.Value;
            TextModel sourceModel = await _editorSource.GetModel();
            string tag = await sourceModel.GetValueInRange(decRange, EndOfLinePreference.CRLF);
            if (newTagVal)
            {
                XmlDocument node = new XmlDocument();
                bool emptyTag = Helpers.IsClosedTag(tag);
                if (emptyTag) node.LoadXml(tag);
                else node.LoadXml($"{tag}</{AppState.tagName}>");
                foreach (XmlAttribute attrb in node.DocumentElement.Attributes)
                {
                    if (attrb.Name == AppState.attribName) attrb.Value = (AppState.attribStartVal++).ToString();
                }
                if (emptyTag) tag = node.OuterXml;
                else tag = node.OuterXml.Substring(0, node.OuterXml.IndexOf("</"));
            }


            Selection targetSel = await _editorTarget.GetSelection();
            Position targetStartPos = new Position()
            {

                Column = targetSel.StartColumn,
                LineNumber = targetSel.StartLineNumber,
            };
            Position targetEndPos = new Position()
            {
                Column = targetSel.EndColumn,
                LineNumber = targetSel.EndLineNumber
            };
            if (targetStartPos.LineNumber == targetEndPos.LineNumber)
            {
                targetEndPos.Column += tag.Length;
            }

            ///insert tag on target
            if (targetSel.StartLineNumber != targetSel.EndLineNumber || targetSel.StartColumn != targetSel.EndColumn)
            {//a range is selected
                await _editorTarget.SetPosition(targetStartPos);
                await _editorTarget.Trigger("keyboard", "type", Helpers.TagToJson(tag, enmTagChanges.OpenTag));

                string endTag = $"</{AppState.tagName}>";
                await _editorTarget.SetPosition(targetEndPos);
                await _editorTarget.Trigger("keyboard", "type", Helpers.TagToJson(endTag, enmTagChanges.DoNothing));

                if (targetStartPos.LineNumber == targetEndPos.LineNumber)
                {// adding on one line, need to take into acount both opening and closing tags
                    if (!Helpers.IsClosedTag(tag)) targetSel.EndColumn += tag.Length;// add opening tag
                    else targetSel.EndColumn += tag.Length - 1;//opening tag removes '/'
                }
                targetSel.EndColumn += endTag.Length;//always add closing tag
            }
            else
            {//insert at cursor
                await _editorTarget.Trigger("keyboard", "type", Helpers.TagToJson(tag, enmTagChanges.CloseTag));
                if (tag.IndexOf("/>") != -1) targetSel.EndColumn += tag.Length;//for painting target
                else targetSel.EndColumn += tag.Length + 1;//closing tag adds '/'
            }

            //paint source for done
            await Helpers.ColorRange(_editorSource, dec.Value, dec.Key);

            //paint target for done
            await Helpers.ColorRange(_editorTarget, targetSel);
        }
    }

    private async void CopyTagWNew()
    {
        await CopyTag(newTagVal: true);
    }
}
